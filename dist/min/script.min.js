/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 279:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

__webpack_require__(279);

var wallpaperMenu = document.getElementById("overlay"),
    wallpaperBtn = document.getElementById("wallpaper-btn"),
    overlayClose = document.getElementById("close"),
    downloadButtons = _toConsumableArray(document.getElementsByClassName("download-button")),
    wallpapers = _toConsumableArray(document.getElementsByClassName("wallpaper-carousel")),
    carouselButtons = _toConsumableArray(document.querySelectorAll("[carousel-button]")),
    contactButton = document.querySelector("[contact]");

var mainLink = "https://drive.google.com/uc?export=download&id=";

function downloadWallpaper(imageId) {
  window.open("".concat(mainLink).concat(imageId), "_blank");
} // Hostinger redirect


_toConsumableArray(document.querySelectorAll("[hostinger]")).forEach(function (button) {
  button.addEventListener("click", function () {
    window.location.href = "https://www.hostg.xyz/aff_c?offer_id=6&aff_id=95130";
  });
}); // Nord VPN redirect


_toConsumableArray(document.querySelectorAll("[nordvpn]")).forEach(function (button) {
  button.addEventListener("click", function () {
    window.location.href = "https://nordvpn.com/";
  });
}); // Show overlay


wallpaperBtn.addEventListener("click", function (event) {
  event.preventDefault();
  wallpaperMenu.style.display = "flex";
}); // Close overlay

overlayClose.addEventListener("click", function (_) {
  wallpaperMenu.style.display = "none";
}); // Download buttons

downloadButtons.forEach(function (element) {
  element.addEventListener("click", function (event) {
    var element = event.currentTarget;

    _toConsumableArray(element.parentElement.firstElementChild.children).forEach(function (element) {
      if (element.hasAttribute("active-data")) {
        downloadWallpaper(element.firstElementChild.id);
      }
    });
  });
}); // Carousel buttons

carouselButtons.forEach(function (button) {
  var ulElements = _toConsumableArray(button.parentElement.firstElementChild.children);

  if (button.hasAttribute("prev")) {
    button.addEventListener("click", function (_) {
      for (var i = 0; i < ulElements.length; i++) {
        if (ulElements[i].hasAttribute("active-data")) {
          if (i - 1 >= 0) {
            ulElements[i].removeAttribute("active-data");
            ulElements[i - 1].setAttribute("active-data", "");
            break;
          }
        }
      }
    });
  }

  if (button.hasAttribute("next")) {
    button.addEventListener("click", function (_) {
      for (var i = 0; i < ulElements.length; i++) {
        if (ulElements[i].hasAttribute("active-data")) {
          if (i + 1 < ulElements.length) {
            ulElements[i].removeAttribute("active-data");
            ulElements[i + 1].setAttribute("active-data", "");
            break;
          }
        }
      }
    });
  }
}); // Contact

contactButton.addEventListener("click", function () {// Form website link was here
  // window.location.href = "";
});
})();

/******/ })()
;